<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | Konrad Podgórski - Web Developer]]></title>
  <link href="http://konradpodgorski.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://konradpodgorski.com/"/>
  <updated>2013-11-12T23:19:04+01:00</updated>
  <id>http://konradpodgorski.com/</id>
  <author>
    <name><![CDATA[Konrad Podgórski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to validate emails outside of form with Symfony Validator Component]]></title>
    <link href="http://konradpodgorski.com/blog/2013/10/29/how-to-validate-emails-outside-of-form-with-symfony-validator-component/"/>
    <updated>2013-10-29T14:09:00+01:00</updated>
    <id>http://konradpodgorski.com/blog/2013/10/29/how-to-validate-emails-outside-of-form-with-symfony-validator-component</id>
    <content type="html"><![CDATA[<p>I&rsquo;m building an invitation mechanism where owner of group can invite one or many users by providing email address(es) through rest api.
 This is very simple using Symfony Validator Component, but I noticed strange behavior when running tests. If I do
  not pass any emails I get wrong status code. 200 OK instead of 400 bad request.</p>

<p>After a while I found that using only \Symfony\Component\Validator\Constraints\Email() is not enough. Validator will
 pass null values and empty string, which is obvious wrong in my case.
  I had to also add NotBlank constraint, don&rsquo;t forget that in future.</p>

<p>At first I thought that this is a bug, but since it&rsquo;s covered by separate 2 tests here
<a href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php#L35">https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php#L35</a>
I will leave it as it is.</p>

<p>Credit goes to the functional tests! :)</p>

<p>Snippet for further reference.</p>

<p>```php</p>

<pre><code>/**
 * Validates single email (or an array of email addresses
 *
 * @param array|string $emails
 *
 * @return array
 */
public function validateEmails($emails){

    $errors = array();
    $emails = is_array($emails) ? $emails : array($emails);

    $validator = $this-&gt;container-&gt;get('validator');

    $constraints = array(
        new \Symfony\Component\Validator\Constraints\Email(),
        new \Symfony\Component\Validator\Constraints\NotBlank()
    );

    foreach ($emails as $email) {

        $error = $validator-&gt;validateValue($email, $constraints);

        if (count($error) &gt; 0) {
            $errors[] = $error;
        }
    }

    return $errors;
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step by step guide how to configure server for PHP / Symfony project]]></title>
    <link href="http://konradpodgorski.com/blog/2013/10/23/guide-how-to-configure-server-for-symfony/"/>
    <updated>2013-10-23T11:18:00+02:00</updated>
    <id>http://konradpodgorski.com/blog/2013/10/23/guide-how-to-configure-server-for-symfony</id>
    <content type="html"><![CDATA[<p>I decided to publish notes that I have been gathering lately about configuring servers.
This is a complete guide how to configure server for production usage with Symfony or any PHP project.
Instruction might seem to you very long and I totally agree with you. It took me few months to finish.</p>

<!-- more -->


<p>These steps are about preparing your server for PHP / Symfony application and do not cover code deployment itself.</p>

<p>If you found this useful leave a comment or share link to your friends, it&rsquo;s always good to know that someone (besides Googlebot) actually read this :)</p>

<p><div class="sharing">
  
  <a href="//twitter.com/share" class="twitter-share-button" data-url="http://konradpodgorski.comblog/categories/php/atom.xml" data-via="konradpodgorski" data-counturl="http://konradpodgorski.comblog/categories/php/atom.xml" >Tweet</a>
  
  
  <div class="g-plusone" data-size="medium"></div>
  
  
    <div class="fb-like" data-send="true" data-width="450" data-show-faces="false"></div>
  
</div>
</p>

<p><strong>All steps should be done in order of reading. Configuration should not take you more than two hours.
It was tested by me on ~10 machines, however if you find something not working don&rsquo;t hesitate to let me know.
I try to help you and correct/expand guide to cover your problem.</strong></p>

<p>Requirements:</p>

<ul>
<li>OS: Debian 6.0 or 7.0</li>
</ul>


<p>You will get server with:</p>

<ul>
<li>Nginx (latest stable), using sockets to communicate with PHP rather than TCP/IP</li>
<li>PHP 5.4 (latest stable)</li>
<li>MySQL 5.5 (production settings)</li>
<li>NodeJS (latest stable), including: Less, Uglify-JS</li>
<li>Twig C extension</li>
<li>GIT</li>
<li>Optional: Zend OPCache, APCu</li>
</ul>


<p>Security:</p>

<ul>
<li>Disabled direct root access</li>
<li>Installed sudo</li>
<li>Installed fail2ban (deny access after 3 incorrect login attempts)</li>
<li>Non privileged user for deployments</li>
<li>Authorization using ssh keys</li>
</ul>


<p>Other</p>

<ul>
<li>Correct timezone</li>
<li>Fixed common locale warnings</li>
<li>Color prompt</li>
<li>Removed Apache2</li>
</ul>


<h1>Step by step guide how to configure server for PHP / Symfony project</h1>

<h3>Mass replace</h3>

<p>You can copy guide to your favorite editor and use mass replace function, this way later you can just copy paste all commands.</p>

<p>Use mass replace function to change following unique strings</p>

<ul>
<li>SERVERIPADDRESS to your actual IPv4 ip address</li>
<li>NONPRIVILAGEUNIXUSERNAME to unix username you want to use, e.g. konrad</li>
<li>APPDOMAINNAME to domain name without <a href="http://">http://</a> and trailing slash e.g. konradpodgorski.com</li>
</ul>


<h3>Start</h3>

<p>First log in</p>

<pre><code>ssh root@SERVERIPADDRESS
</code></pre>

<p>On server create new user</p>

<pre><code>useradd NONPRIVILAGEUNIXUSERNAME -m -s /bin/bash
</code></pre>

<h3>Update apt-get</h3>

<pre><code>apt-get update
</code></pre>

<h3>Install nano</h3>

<pre><code>apt-get install nano
</code></pre>

<h3>Install sudo</h3>

<pre><code>apt-get install sudo

nano /etc/sudoers
</code></pre>

<p>Before</p>

<pre><code>#
# This file MUST be edited with the 'visudo' command as root.
#
# Please consider adding local content in /etc/sudoers.d/ instead of
# directly modifying this file.
#
# See the man page for details on how to write a sudoers file.
#
Defaults        env_reset
Defaults        secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

# Host alias specification

# User alias specification

# Cmnd alias specification

# User privilege specification
root    ALL=(ALL:ALL) ALL

# Members of the admin group may gain root privileges
%admin ALL=(ALL) ALL

# Allow members of group sudo to execute any command
%sudo   ALL=(ALL:ALL) ALL

# See sudoers(5) for more information on "#include" directives:
</code></pre>

<p>After (added: <strong>NONPRIVILAGEUNIXUSERNAME    ALL=(ALL) NOPASSWD: ALL</strong>)</p>

<pre><code>#
# This file MUST be edited with the 'visudo' command as root.
#
# Please consider adding local content in /etc/sudoers.d/ instead of
# directly modifying this file.
#
# See the man page for details on how to write a sudoers file.
#
Defaults        env_reset
Defaults        secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

# Host alias specification

# User alias specification

# Cmnd alias specification

# User privilege specification
root    ALL=(ALL:ALL) ALL

NONPRIVILAGEUNIXUSERNAME    ALL=(ALL) NOPASSWD: ALL


# Members of the admin group may gain root privileges
%admin ALL=(ALL) ALL

# Allow members of group sudo to execute any command
%sudo   ALL=(ALL:ALL) ALL

# See sudoers(5) for more information on "#include" directives:
</code></pre>

<h3>Switch user you just created</h3>

<pre><code>su NONPRIVILAGEUNIXUSERNAME
</code></pre>

<p>Add your public key to an authorized keys</p>

<pre><code>cd ~
mkdir .ssh
nano .ssh/authorized_keys
</code></pre>

<p>Paste your public key and save, set proper chmod</p>

<pre><code>chmod 700 .ssh -R
</code></pre>

<p>logout and check if you can log in as NONPRIVILAGEUNIXUSERNAME directly without password</p>

<pre><code>ssh NONPRIVILAGEUNIXUSERNAME@SERVERIPADDRESS
</code></pre>

<h3>Disable log in with password (you will use public key anyway)</h3>

<pre><code>sudo passwd -l NONPRIVILAGEUNIXUSERNAME
</code></pre>

<p>This command locks the password</p>

<h3>Color prompt (optional)</h3>

<pre><code>nano ~/.bashrc
</code></pre>

<p>Uncomment following line (remove #)</p>

<pre><code>#force_color_prompt=yes
</code></pre>

<h3>fail2ban &ndash; solution for brute force attacks</h3>

<pre><code>sudo apt-get install fail2ban
</code></pre>

<h3>Disable direct log in on root account</h3>

<pre><code>sudo nano /etc/ssh/sshd_config
</code></pre>

<p>Find and change from <strong>yes</strong> to <strong>no</strong> (Ctrl + W in nano)</p>

<pre><code>PermitRootLogin no
</code></pre>

<h3>We will need these to compile Node JS from sources later</h3>

<p>To do that install</p>

<pre><code>sudo apt-get update
sudo apt-get install -y gcc g++ make
</code></pre>

<h3>Server timezone</h3>

<pre><code>sudo dpkg-reconfigure tzdata
</code></pre>

<h3>Locale stuff</h3>

<p>Get rid of annoying errors when not using EN_US locale</p>

<p><a href="http://hexample.com/2012/02/05/fixing-locale-problem-debian/">http://hexample.com/2012/02/05/fixing-locale-problem-debian/</a></p>

<h3>Change hostname to something better e.g. symfony-app-server (you cannot use dots)</h3>

<p>This step is optional</p>

<pre><code>sudo nano /etc/hostname
</code></pre>

<p>Put same host in /etc/hosts</p>

<pre><code>sudo nano /etc/hosts
</code></pre>

<p>restart server</p>

<pre><code>sudo reboot
</code></pre>

<h3>DotDeb</h3>

<p>DotDeb is reliable and up to date repository for most of packages required in web server</p>

<p>First add the dotdeb repo to your sources.list file:</p>

<pre><code>sudo nano /etc/apt/sources.list
</code></pre>

<p>add this to the bottom of the file:</p>

<p>Debian 7.0 Wheezy</p>

<pre><code>deb http://packages.dotdeb.org wheezy all
deb-src http://packages.dotdeb.org wheezy all
</code></pre>

<p>or Debian 6.0 Squeeze</p>

<pre><code>deb http://packages.dotdeb.org squeeze all
deb-src http://packages.dotdeb.org squeeze all
</code></pre>

<p>Next, add the GnuPG key to your distribution:</p>

<pre><code>wget http://www.dotdeb.org/dotdeb.gpg
cat dotdeb.gpg | sudo apt-key add -
</code></pre>

<p>Update APT:</p>

<pre><code>sudo apt-get update
</code></pre>

<p>Ref: <a href="http://www.dotdeb.org/instructions/">http://www.dotdeb.org/instructions/</a></p>

<h3>PHP 5</h3>

<pre><code>sudo apt-get install -y php5 php5-fpm php-pear php5-common php5-mcrypt php5-mysql php5-cli php5-gd php5-intl php5-curl php5-dev
</code></pre>

<h3>NGINX</h3>

<p>You probably won&rsquo;t need most of it features (like proxy, mail) so nginx-light should be enough. Latest stable release from dotdeb.org</p>

<pre><code>sudo apt-get install nginx-light
</code></pre>

<h3>NGINX &ndash; General Configuration</h3>

<pre><code>#/etc/nginx/nginx.conf
user www-data;
worker_processes 2;
pid /var/run/nginx.pid;

events {
    worker_connections 768;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    gzip on;
    gzip_disable "msie6";

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
</code></pre>

<h3>NGINX &ndash; configuration specific for application</h3>

<p>create configuration file</p>

<pre><code>sudo nano /etc/nginx/sites-available/APPDOMAINNAME
</code></pre>

<p>edit #/etc/nginx/sites-available/APPDOMAINNAME</p>

<pre><code>upstream php5-fpm {
    server unix:/var/run/php5-fpm.sock;
}

# redirect from www to non-www
server {
  listen 80;

  server_name www.APPDOMAINNAME;
  return 301 $scheme://APPDOMAINNAME$request_uri;
}

server {
  listen 80;

  server_name APPDOMAINNAME;
  root /var/www/APPDOMAINNAME/current/web;

  client_max_body_size 256M;

  # strip app.php/ prefix if it is present
  rewrite ^/app\.php/?(.*)$ /$1 permanent;

  location / {
    index app.php app_dev.php;
    try_files $uri @rewriteapp;
  }

  location @rewriteapp {
    rewrite ^(.*)$ /app.php/$1 last;
  }

  # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
  location ~ ^/(app|app_dev)\.php(/|$) {
    fastcgi_pass   php5-fpm;
    fastcgi_split_path_info ^(.+\.php)(/.*)$;
    include fastcgi_params;
    fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
    fastcgi_param  HTTPS              off;
  }
}
</code></pre>

<p>Enable site</p>

<pre><code>sudo ln -s /etc/nginx/sites-available/APPDOMAINNAME /etc/nginx/sites-enabled/APPDOMAINNAME
</code></pre>

<p>Remove default</p>

<pre><code>sudo rm /etc/nginx/sites-enabled/default
</code></pre>

<h3>PHP5-FPM</h3>

<p>Edit</p>

<pre><code># /etc/php5/fpm/pool.d/www.conf
</code></pre>

<p>Find and edit if needed user and group</p>

<pre><code>; Unix user/group of processes
; Note: The user is mandatory. If the group is not set, the default user's group
;       will be used.
user = www-data
group = www-data
</code></pre>

<p>Find and replace</p>

<pre><code>listen = 127.0.0.1:9000
</code></pre>

<p>with</p>

<pre><code>listen = /var/run/php5-fpm.sock
</code></pre>

<h3>PHP.ini configuration</h3>

<p>FPM (used by web server &ndash; Nginx)</p>

<pre><code># /etc/php5/fpm/php.ini

date.timezone = Europe/Warsaw

short_open_tag = Off

expose_php = off

max_execution_time = 60

memory_limit = 256M

post_max_size = 128M
upload_max_filesize = 128M
</code></pre>

<p>CLI (used in console)</p>

<pre><code># /etc/php5/cli/php.ini

date.timezone = Europe/Warsaw

short_open_tag = Off
</code></pre>

<h3>Twig extension</h3>

<pre><code>sudo pear channel-discover pear.twig-project.org
sudo pear install twig/CTwig

sudo nano /etc/php5/conf.d/twig.ini
</code></pre>

<p>Paste inside</p>

<pre><code>extension=twig.so
</code></pre>

<h3>Zend OPCache</h3>

<pre><code>sudo pecl install zendopcache-7.0.2

sudo nano /etc/php5/mods-available/opcache.ini

# /etc/php5/mods-available/opcache.ini

zend_extension=/usr/lib/php5/20100525/opcache.so
opcache.memory_consumption=128
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=4000
opcache.revalidate_freq=60
opcache.fast_shutdown=1
opcache.enable_cli=1

cd /etc/php5/conf.d
sudo ln -s ../mods-available/opcache.ini 05-opcache.ini
</code></pre>

<h3>APCu</h3>

<pre><code>git clone https://github.com/krakjoe/apcu
cd apcu
phpize
./configure
make
sudo make install

sudo nano /etc/php5/mods-available/apcu.ini

# /etc/php5/mods-available/apcu.ini

extension=apcu.so
apc.enabled=1
apc.shm_size=32M
apc.ttl=7200
apc.gc_ttl=3600
apc.enable_cli=0

cd /etc/php5/conf.d
sudo ln -s ../mods-available/apcu.ini 20-apcu.ini
</code></pre>

<h3>Restart PHP5-FPM</h3>

<p>For all changes to take an effect you need to restart php</p>

<pre><code>sudo service php5-fpm restart
</code></pre>

<h3>MySQL</h3>

<pre><code>sudo apt-get install -y mysql-server
</code></pre>

<p>In a window that popped up enter root password, use program like KeePassX to generate secure password</p>

<p><em>Tweak configuration</em></p>

<pre><code>sudo nano /etc/mysql/my.cnf
</code></pre>

<p>Add <em>innodb_file_per_table</em> right after <em>[mysqld]</em></p>

<pre><code>[mysqld]

innodb_file_per_table
</code></pre>

<p>Restart mysql for changes to take effect</p>

<pre><code>sudo service mysql restart
</code></pre>

<p>Next run and follow instructions</p>

<pre><code>sudo mysql_secure_installation
</code></pre>

<p>Install MySQL Workbench for secure managing your database over a SSH tunnel.
<a href="http://www.mysql.com/products/workbench/">http://www.mysql.com/products/workbench/</a></p>

<p><em>DO NOT expose your mysql to outside world nor install web management tools like PhpMyAdmin, they were great few years ago. Now we have a better solutions.</em></p>

<h3>NodeJS</h3>

<p><strong>optional &ndash; I use it for compiling less files and minimizing javascripts with Uglify-JS</strong></p>

<p>This is a common fact that NodeJS in Debian/Ubuntu is seriously outdated. Installing from source is nice and easy.</p>

<p><em>Install make and required compilers</em></p>

<pre><code>sudo apt-get update
sudo apt-get install -y gcc g++ make
</code></pre>

<p><em>Get source and install</em></p>

<p>Sadly there are no permalink for latest stable version so you are on your own with that. Go to <a href="http://nodejs.org/dist/latest/">http://nodejs.org/dist/latest/</a> and change version</p>

<pre><code>wget http://nodejs.org/dist/latest/node-v0.10.21.tar.gz
tar -zxvf node-v0.10.21.tar.gz
cd node-v0.10.21
./configure
make
sudo make install
</code></pre>

<p><em>Installing LESS compiler</em></p>

<pre><code>sudo npm install -g less
</code></pre>

<p><em>Installing uglify-js</em></p>

<pre><code>sudo npm install -g uglify-js
</code></pre>

<h3>GIT</h3>

<pre><code>sudo apt-get install -y git
</code></pre>

<h3>Remove Apache2, important!</h3>

<pre><code>sudo service apache2 stop
</code></pre>

<p>We don&rsquo;t need apache2 so remove it</p>

<pre><code>sudo apt-get remove apache2
</code></pre>

<p>Otherwise it will take 80 port after next reboot and nginx will not work</p>

<h3>User for deploying</h3>

<p>We will use www-data user to deploy code.</p>

<p>Add your public key</p>

<pre><code>sudo mkdir /var/www/.ssh -p
sudo nano /var/www/.ssh/authorized_keys
</code></pre>

<p><strong>It&rsquo;s super important that owner and group of whole .ssh should be root. This way with read permission user www-data will be able to read public key but won&rsquo;t be able to add new one or edit existing.</strong></p>

<p>With this we won&rsquo;t give www-data any more permissions than it already has.</p>

<h3>Directory for application</h3>

<pre><code>sudo mkdir /var/www/APPDOMAINNAME -p
sudo chown www-data:www-data /var/www/APPDOMAINNAME
</code></pre>

<h3>Deploying with Capifony</h3>

<p>This is super important step. Github allows only for 60 requests per hour for non authenticated connections. Using composer cache will prevent getting banned</p>

<pre><code>sudo mkdir /var/www/.composer
sudo chown www-data:www-data /var/www/.composer
</code></pre>

<p>Also a Curl is required if you are using Capifony for deployment</p>

<p>   sudo apt-get install curl</p>

<h3>Test everything by restarting server</h3>

<pre><code>sudo reboot
</code></pre>

<h1>That&rsquo;s it!</h1>

<p>Thank you for taking time to read this guide.</p>
]]></content>
  </entry>
  
</feed>
