<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Konrad Podgórski - Web Developer]]></title>
    <link href="http://konradpodgorski.com/atom.xml" rel="self"/>
    <link href="http://konradpodgorski.com/"/>
    <updated>2014-06-06T23:45:53+02:00</updated>
    <id>http://konradpodgorski.com/</id>
            <author>
            <name><![CDATA[Konrad Podgórski]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[[Solution] Couldn&#039;t find constant Monolog\Logger::DEBUG]]></title>
            <link href="http://konradpodgorski.com/blog/2014/03/25/solution-to-couldnt-find-constant-monolog-logger-debug"/>
            <updated>2014-03-25T11:46:00+01:00</updated>
            <id>http://konradpodgorski.com/blog/2014/03/25/solution-to-couldnt-find-constant-monolog-logger-debug</id>
            <content type="html"><![CDATA[<p>Note for others having same problem</p>

<pre><code>PHP Warning:  constant(): Couldn't find constant Monolog\Logger::DEBUG in [..] /vendor/symfony/monolog-bundle/Symfony/Bundle/MonologBundle/DependencyInjection/MonologExtension.php on line 110
</code></pre>

<p>This is because composer version you are running doesn\'t support PSR-4. to fix it update your composer with</p>

<pre><code>composer self-update
</code></pre>

<p>Credit:
https://groups.google.com/forum/?hl=en#!topic/symfony2/8cNR9IBjuDo</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[How to validate emails outside of form with Symfony Validator Component]]></title>
            <link href="http://konradpodgorski.com/blog/2013/10/29/how-to-validate-emails-outside-of-form-with-symfony-validator-component"/>
            <updated>2013-10-29T14:09:00+01:00</updated>
            <id>http://konradpodgorski.com/blog/2013/10/29/how-to-validate-emails-outside-of-form-with-symfony-validator-component</id>
            <content type="html"><![CDATA[<p>I'm building an invitation mechanism where owner of group can invite one or many users by providing email address(es) through rest api.
 This is very simple using Symfony Validator Component, but I noticed strange behavior when running tests. If I do
  not pass any emails I get wrong status code. 200 OK instead of 400 bad request.</p>

<p>After a while I found that using only \Symfony\Component\Validator\Constraints\Email() is not enough. Validator will
 pass null values and empty string, which is obvious wrong in my case.
  I had to also add NotBlank constraint, don't forget that in future.</p>

<p>At first I thought that this is a bug, but since it's covered by separate 2 tests here
https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Tests/Constraints/EmailValidatorTest.php#L35
I will leave it as it is.</p>

<p>Credit goes to the functional tests! :)</p>

<p>Snippet for further reference.</p>

<pre><code class="php">    /**
     * Validates single email (or an array of email addresses
     *
     * @param array|string $emails
     *
     * @return array
     */
    public function validateEmails($emails){

        $errors = array();
        $emails = is_array($emails) ? $emails : array($emails);

        $validator = $this-&gt;container-&gt;get('validator');

        $constraints = array(
            new \Symfony\Component\Validator\Constraints\Email(),
            new \Symfony\Component\Validator\Constraints\NotBlank()
        );

        foreach ($emails as $email) {

            $error = $validator-&gt;validateValue($email, $constraints);

            if (count($error) &gt; 0) {
                $errors[] = $error;
            }
        }

        return $errors;
    }
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Step by step guide how to configure server for PHP / Symfony project]]></title>
            <link href="http://konradpodgorski.com/blog/2013/10/23/guide-how-to-configure-server-for-symfony"/>
            <updated>2013-10-23T11:18:00+02:00</updated>
            <id>http://konradpodgorski.com/blog/2013/10/23/guide-how-to-configure-server-for-symfony</id>
            <content type="html"><![CDATA[<p>I decided to publish notes that I have been gathering lately about configuring servers.
This is a complete guide how to configure server for production usage with Symfony or any PHP project.
Instruction might seem to you very long and I totally agree with you. It took me few months to finish.</p>

<!-- more -->

<p>These steps are about preparing your server for PHP / Symfony application and do not cover code deployment itself.</p>

<p>If you found this useful leave a comment or share link to your friends, it's always good to know that someone (besides Googlebot) actually read this :)</p>

<p><div class="sharing">
    <a href="//twitter.com/share" class="twitter-share-button" data-url="http://konradpodgorski.com/blog/2013/10/23/guide-how-to-configure-server-for-symfony" data-via="konradpodgorski" data-counturl="http://konradpodgorski.com/blog/2013/10/23/guide-how-to-configure-server-for-symfony" >Tweet</a>
      <div class="g-plusone" data-size="medium"></div>
        <div class="fb-like" data-send="true" data-width="450" data-show-faces="false"></div>
  </div>
</p>

<p><strong>All steps should be done in order of reading. Configuration should not take you more than two hours.
It was tested by me on ~10 machines, however if you find something not working don't hesitate to let me know.
I try to help you and correct/expand guide to cover your problem.</strong></p>

<p>Requirements:</p>

<ul>
<li>OS: Debian 6.0 or 7.0</li>
</ul>

<p>You will get server with:</p>

<ul>
<li>Nginx (latest stable), using sockets to communicate with PHP rather than TCP/IP</li>
<li>PHP 5.4 or 5.5 (latest stable)</li>
<li>MySQL 5.5 (production settings)</li>
<li>NodeJS (latest stable), including: Less, Uglify-JS</li>
<li>Twig C extension</li>
<li>GIT</li>
<li>Optional: Zend OPCache, APCu</li>
</ul>

<p>Security:</p>

<ul>
<li>Disabled direct root access</li>
<li>Installed sudo</li>
<li>Installed fail2ban (deny access after 3 incorrect login attempts)</li>
<li>Non privileged user for deployments</li>
<li>Authorization using ssh keys</li>
</ul>

<p>Other</p>

<ul>
<li>Correct timezone</li>
<li>Fixed common locale warnings</li>
<li>Color prompt</li>
<li>Removed Apache2</li>
</ul>

<h1>Step by step guide how to configure server for PHP / Symfony project</h1>

<h3>Mass replace</h3>

<p>You can copy guide to your favorite editor and use mass replace function, this way later you can just copy paste all commands.</p>

<p>Use mass replace function to change following unique strings</p>

<ul>
<li>SERVERIPADDRESS to your actual IPv4 ip address</li>
<li>NONPRIVILAGEUNIXUSERNAME to unix username you want to use, e.g. konrad</li>
<li>APPDOMAINNAME to domain name without http:// and trailing slash e.g. konradpodgorski.com</li>
</ul>

<h3>Start</h3>

<p>First log in</p>

<pre><code>ssh root@SERVERIPADDRESS
</code></pre>

<p>On server create new user</p>

<pre><code>useradd NONPRIVILAGEUNIXUSERNAME -m -s /bin/bash
</code></pre>

<h3>Update apt-get</h3>

<pre><code>apt-get update
</code></pre>

<h3>Install nano</h3>

<pre><code>apt-get install nano
</code></pre>

<h3>Install sudo</h3>

<pre><code>apt-get install sudo

nano /etc/sudoers
</code></pre>

<p>Before</p>

<pre><code>#
# This file MUST be edited with the 'visudo' command as root.
#
# Please consider adding local content in /etc/sudoers.d/ instead of
# directly modifying this file.
#
# See the man page for details on how to write a sudoers file.
#
Defaults        env_reset
Defaults        secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

# Host alias specification

# User alias specification

# Cmnd alias specification

# User privilege specification
root    ALL=(ALL:ALL) ALL

# Members of the admin group may gain root privileges
%admin ALL=(ALL) ALL

# Allow members of group sudo to execute any command
%sudo   ALL=(ALL:ALL) ALL

# See sudoers(5) for more information on "#include" directives:
</code></pre>

<p>After (added: <strong>NONPRIVILAGEUNIXUSERNAME    ALL=(ALL) NOPASSWD: ALL</strong>)</p>

<pre><code>#
# This file MUST be edited with the 'visudo' command as root.
#
# Please consider adding local content in /etc/sudoers.d/ instead of
# directly modifying this file.
#
# See the man page for details on how to write a sudoers file.
#
Defaults        env_reset
Defaults        secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

# Host alias specification

# User alias specification

# Cmnd alias specification

# User privilege specification
root    ALL=(ALL:ALL) ALL

NONPRIVILAGEUNIXUSERNAME    ALL=(ALL) NOPASSWD: ALL


# Members of the admin group may gain root privileges
%admin ALL=(ALL) ALL

# Allow members of group sudo to execute any command
%sudo   ALL=(ALL:ALL) ALL

# See sudoers(5) for more information on "#include" directives:
</code></pre>

<h3>Switch user you just created</h3>

<pre><code>su NONPRIVILAGEUNIXUSERNAME
</code></pre>

<p>Add your public key to an authorized keys</p>

<pre><code>cd ~
mkdir .ssh
nano .ssh/authorized_keys
</code></pre>

<p>Paste your public key and save, set proper chmod</p>

<pre><code>chmod 700 .ssh -R
</code></pre>

<p>logout and check if you can log in as NONPRIVILAGEUNIXUSERNAME directly without password</p>

<pre><code>ssh NONPRIVILAGEUNIXUSERNAME@SERVERIPADDRESS
</code></pre>

<h3>Disable log in with password (you will use public key anyway)</h3>

<pre><code>sudo passwd -l NONPRIVILAGEUNIXUSERNAME
</code></pre>

<p>This command locks the password</p>

<h3>Color prompt (optional)</h3>

<pre><code>nano ~/.bashrc
</code></pre>

<p>Uncomment following line (remove #)</p>

<pre><code>#force_color_prompt=yes
</code></pre>

<h3>fail2ban - solution for brute force attacks</h3>

<pre><code>sudo apt-get install fail2ban
</code></pre>

<h3>Disable direct log in on root account</h3>

<pre><code>sudo nano /etc/ssh/sshd_config
</code></pre>

<p>Find and change from <strong>yes</strong> to <strong>no</strong> (Ctrl + W in nano)</p>

<pre><code>PermitRootLogin no
</code></pre>

<h3>We will need these to compile Node JS from sources later</h3>

<p>To do that install</p>

<pre><code>sudo apt-get update
sudo apt-get install -y gcc g++ make
</code></pre>

<h3>Server timezone</h3>

<pre><code>sudo dpkg-reconfigure tzdata
</code></pre>

<h3>Locale stuff</h3>

<p>Get rid of annoying errors when not using EN_US locale</p>

<p><a href="http://hexample.com/2012/02/05/fixing-locale-problem-debian/">http://hexample.com/2012/02/05/fixing-locale-problem-debian/</a></p>

<h3>Change hostname to something better e.g. symfony-app-server (you cannot use dots)</h3>

<p>This step is optional</p>

<pre><code>sudo nano /etc/hostname
</code></pre>

<p>Put same host in /etc/hosts</p>

<pre><code>sudo nano /etc/hosts
</code></pre>

<p>restart server</p>

<pre><code>sudo reboot
</code></pre>

<h2 id="dotdeb">Dotdeb</h2>

<p>DotDeb is a reliable and up to date repository for most of packages required in web server</p>

<p>Instruction was copied from official DotDeb site <a href="http://www.dotdeb.org/instructions/">http://www.dotdeb.org/instructions/</a></p>

<p>First add the dotdeb repo to your sources.list file:</p>

<pre><code>sudo nano /etc/apt/sources.list
</code></pre>

<p>add this to the bottom of the file:</p>

<p>Debian 7.0 Wheezy</p>

<pre><code>deb http://packages.dotdeb.org wheezy all
deb-src http://packages.dotdeb.org wheezy all
</code></pre>

<p>or Debian 6.0 Squeeze</p>

<pre><code>deb http://packages.dotdeb.org squeeze all
deb-src http://packages.dotdeb.org squeeze all
</code></pre>

<p>If you want to install :</p>

<ul>
<li>PHP 5.5 on Debian 7.0 “Wheezy”, add these two lines too :</li>
</ul>

<pre><code>deb http://packages.dotdeb.org wheezy-php55 all
deb-src http://packages.dotdeb.org wheezy-php55 all
</code></pre>

<ul>
<li>PHP 5.4 on Debian 6.0 “Squeeze”, add these two lines too :</li>
</ul>

<pre><code>deb http://packages.dotdeb.org squeeze-php54 all
deb-src http://packages.dotdeb.org squeeze-php54 all
</code></pre>

<p>Next, add the GnuPG key to your distribution:</p>

<pre><code>wget http://www.dotdeb.org/dotdeb.gpg
cat dotdeb.gpg | sudo apt-key add -
</code></pre>

<p>Update APT:</p>

<pre><code class="bash">sudo apt-get update
</code></pre>

<h2 id="nginx">NGINX</h2>

<p>You probably won't need most of it features (like proxy, mail) so nginx-light should be enough. Latest stable release from dotdeb.org</p>

<pre><code class="bash">sudo apt-get install nginx-light
</code></pre>

<h3>NGINX - General Configuration</h3>

<p><strong>Note:</strong> set <code>worker_processes 2;</code> to the number of cpu cores your server has</p>

<pre><code>#/etc/nginx/nginx.conf
user www-data;
worker_processes 2;
pid /var/run/nginx.pid;

events {
    worker_connections 768;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    gzip on;
    gzip_disable "msie6";

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
</code></pre>

<h3>NGINX - configuration specific for application</h3>

<p>create configuration file</p>

<pre><code class="bash">sudo nano /etc/nginx/sites-available/APPDOMAINNAME
</code></pre>

<p>edit #/etc/nginx/sites-available/APPDOMAINNAME</p>

<pre><code class="conf"># /etc/nginx/sites-available/APPDOMAINNAME
upstream php5-fpm {
    server unix:/var/run/php5-fpm.sock;
}

# redirect from www to non-www
server {
  listen 80;

  server_name www.APPDOMAINNAME;
  return 301 $scheme://APPDOMAINNAME$request_uri;
}

server {
  listen 80;

  server_name APPDOMAINNAME;
  root /var/www/APPDOMAINNAME/current/web;

  client_max_body_size 256M;

  # strip app.php/ prefix if it is present
  rewrite ^/app\.php/?(.*)$ /$1 permanent;

  location / {
    index app.php app_dev.php;
    try_files $uri @rewriteapp;
  }

  location @rewriteapp {
    rewrite ^(.*)$ /app.php/$1 last;
  }

  # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
  location ~ ^/(app|app_dev)\.php(/|$) {
    fastcgi_pass   php5-fpm;
    fastcgi_split_path_info ^(.+\.php)(/.*)$;
    include fastcgi_params;
    fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
    fastcgi_param  HTTPS              off;
  }
}
</code></pre>

<p>Enable site</p>

<pre><code class="bash">sudo ln -s /etc/nginx/sites-available/APPDOMAINNAME /etc/nginx/sites-enabled/APPDOMAINNAME
</code></pre>

<p>Remove default</p>

<pre><code>sudo rm /etc/nginx/sites-enabled/default
</code></pre>

<h2 id="php-fpm">PHP5-FPM</h2>

<p>Installing required packages</p>

<pre><code class="bash">sudo apt-get install -y php5 php5-fpm php-pear php5-common php5-mcrypt php5-mysql php5-cli php5-gd php5-intl php5-curl php5-dev
</code></pre>

<h3>pool.d/www.conf</h3>

<p><strong>Update (June 2014):</strong> since the time I created this guide php5-fpm team changed <code>/etc/php5/fpm/pool.d/www.conf</code> default settings to described below. You don't have to change anything from this section. I'm leaving it as a reference in case someone use old config.</p>

<p><strike>
Edit</p>

<pre><code># /etc/php5/fpm/pool.d/www.conf
</code></pre>

<p>Find and edit if needed user and group</p>

<pre><code>; Unix user/group of processes
; Note: The user is mandatory. If the group is not set, the default user's group
;       will be used.
user = www-data
group = www-data
</code></pre>

<p>Find and replace</p>

<pre><code>listen = 127.0.0.1:9000
</code></pre>

<p>with</p>

<pre><code>listen = /var/run/php5-fpm.sock
</code></pre>

<p></strike></p>

<h3>php.ini configuration</h3>

<p>FPM (used by web server - Nginx)</p>

<pre><code># /etc/php5/fpm/php.ini

date.timezone = Europe/Warsaw

short_open_tag = Off

expose_php = off

max_execution_time = 60

memory_limit = 256M

post_max_size = 128M
upload_max_filesize = 128M
</code></pre>

<p>CLI (used in console)</p>

<pre><code># /etc/php5/cli/php.ini

date.timezone = Europe/Warsaw

short_open_tag = Off
</code></pre>

<h3>Twig extension</h3>

<pre><code>sudo pear channel-discover pear.twig-project.org
sudo pear install twig/CTwig

sudo nano /etc/php5/mods-available/twig.ini
</code></pre>

<p>Paste inside</p>

<pre><code>extension=twig.so
</code></pre>

<h3>Zend OPCache</h3>

<pre><code>sudo pecl install zendopcache-7.0.2

sudo nano /etc/php5/mods-available/opcache.ini

# /etc/php5/mods-available/opcache.ini

zend_extension=/usr/lib/php5/20100525/opcache.so
opcache.memory_consumption=128
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=4000
opcache.revalidate_freq=60
opcache.fast_shutdown=1
opcache.enable_cli=1

cd /etc/php5/conf.d
sudo ln -s ../mods-available/opcache.ini 05-opcache.ini
</code></pre>

<h3>APCu</h3>

<pre><code>git clone https://github.com/krakjoe/apcu
cd apcu
phpize
./configure
make
sudo make install

sudo nano /etc/php5/mods-available/apcu.ini

# /etc/php5/mods-available/apcu.ini

extension=apcu.so
apc.enabled=1
apc.shm_size=32M
apc.ttl=7200
apc.gc_ttl=3600
apc.enable_cli=0

cd /etc/php5/conf.d
sudo ln -s ../mods-available/apcu.ini 20-apcu.ini
</code></pre>

<h3>Restart PHP5-FPM</h3>

<p>For all changes to take an effect you need to restart php</p>

<pre><code>sudo service php5-fpm restart
</code></pre>

<h3>MySQL</h3>

<pre><code>sudo apt-get install -y mysql-server
</code></pre>

<p>In a window that popped up enter root password, use program like KeePassX to generate secure password</p>

<p><em>Tweak configuration</em></p>

<pre><code>sudo nano /etc/mysql/my.cnf
</code></pre>

<p>Add <em>innodb_file_per_table</em> right after <em>[mysqld]</em></p>

<pre><code>[mysqld]

innodb_file_per_table
</code></pre>

<p>Restart mysql for changes to take effect</p>

<pre><code>sudo service mysql restart
</code></pre>

<p>Next run and follow instructions</p>

<pre><code>sudo mysql_secure_installation
</code></pre>

<p>Install MySQL Workbench for secure managing your database over a SSH tunnel.
http://www.mysql.com/products/workbench/</p>

<p><em>DO NOT expose your mysql to outside world nor install web management tools like PhpMyAdmin, they were great few years ago. Now we have a better solutions.</em></p>

<h3>NodeJS</h3>

<p><strong>optional - I use it for compiling less files and minimizing javascripts with Uglify-JS</strong></p>

<p>This is a common fact that NodeJS in Debian/Ubuntu is seriously outdated. Installing from source is nice and easy.</p>

<p><em>Install make and required compilers</em></p>

<pre><code>sudo apt-get update
sudo apt-get install -y gcc g++ make
</code></pre>

<p><em>Get source and install</em></p>

<p>Sadly there are no permalink for latest stable version so you are on your own with that. Go to http://nodejs.org/dist/latest/ and change version</p>

<pre><code>wget http://nodejs.org/dist/latest/node-v0.10.21.tar.gz
tar -zxvf node-v0.10.21.tar.gz
cd node-v0.10.21
./configure
make
sudo make install
</code></pre>

<p><em>Installing LESS compiler</em></p>

<pre><code>sudo npm install -g less
</code></pre>

<p><em>Installing uglify-js</em></p>

<pre><code>sudo npm install -g uglify-js
</code></pre>

<h3>GIT</h3>

<pre><code>sudo apt-get install -y git
</code></pre>

<h3>Remove Apache2, important!</h3>

<pre><code>sudo service apache2 stop
</code></pre>

<p>We don't need apache2 so remove it</p>

<pre><code>sudo apt-get remove apache2
</code></pre>

<p>Otherwise it will take 80 port after next reboot and nginx will not work</p>

<h3>User for deploying</h3>

<p>We will use www-data user to deploy code.</p>

<p>Add your public key</p>

<pre><code>sudo mkdir /var/www/.ssh -p
sudo nano /var/www/.ssh/authorized_keys
</code></pre>

<p><strong>It's super important that owner and group of whole .ssh should be root. This way with read permission user www-data will be able to read public key but won't be able to add new one or edit existing.</strong></p>

<p>With this we won't give www-data any more permissions than it already has.</p>

<h3>Directory for application</h3>

<pre><code>sudo mkdir /var/www/APPDOMAINNAME -p
sudo chown www-data:www-data /var/www/APPDOMAINNAME
</code></pre>

<h3>Deploying with Capifony</h3>

<p>This is super important step. Github allows only for 60 requests per hour for non authenticated connections. Using composer cache will prevent getting banned</p>

<pre><code>sudo mkdir /var/www/.composer
sudo chown www-data:www-data /var/www/.composer
</code></pre>

<p>Also a Curl is required if you are using Capifony for deployment</p>

<p>sudo apt-get install curl</p>

<h3>Test everything by restarting server</h3>

<pre><code>sudo reboot
</code></pre>

<h1>That's it!</h1>

<p>Thank you for taking time to read this guide.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Method &quot;getFlashes&quot; for object &quot;Symfony\Component\HttpFoundation\Session\Session&quot; does not exist]]></title>
            <link href="http://konradpodgorski.com/blog/2013/10/22/method-getflashes-for-object-symfony-slash-component-slash-httpfoundation-slash-session-slash-session-does-not-exist"/>
            <updated>2013-10-22T12:34:00+02:00</updated>
            <id>http://konradpodgorski.com/blog/2013/10/22/method-getflashes-for-object-symfony-slash-component-slash-httpfoundation-slash-session-slash-session-does-not-exist</id>
            <content type="html"><![CDATA[<p>Quick reference for people upgrading Symfony</p>

<p>Error</p>

<blockquote>
  <p>Method "getFlashes" for object "Symfony\Component\HttpFoundation\Session\Session" does not exist</p>
</blockquote>

<!-- more -->

<p>Change</p>

<pre><code>app.session.getFlashes()
</code></pre>

<p>to</p>

<pre><code>app.session.get('flashes')
</code></pre>

<p>Before</p>

<p></p>

<pre><code>    {% for key, message in app.session.getFlashes() %}
    &lt;div class="alert alert-{{ key }}" style="margin-top: 3px;"&gt;
        &lt;a class="close" data-dismiss="alert"&gt;×&lt;/a&gt;
        &lt;strong&gt;{{ ('alert_message.' ~ key)|trans }}&lt;/strong&gt; {{ message }}
    &lt;/div&gt;
    {% endfor %}
</code></pre>

<p></p>

<p>After change</p>

<p></p>

<pre><code>    {% for key, message in app.session.get('flashes') %}
    &lt;div class="alert alert-{{ key }}"&gt;
        &lt;a class="close" data-dismiss="alert"&gt;×&lt;/a&gt;
        &lt;strong&gt;{{ ('alert_message.' ~ key) | trans }}&lt;/strong&gt; {{ message | trans }}
    &lt;/div&gt;
    {% endfor %}
</code></pre>

<p></p>

<p>That's it</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[How I migrated my blog from Wordpress to Octopress]]></title>
            <link href="http://konradpodgorski.com/blog/2013/10/21/how-i-migrated-my-blog-from-wordpress-to-octopress"/>
            <updated>2013-10-21T08:40:00+02:00</updated>
            <id>http://konradpodgorski.com/blog/2013/10/21/how-i-migrated-my-blog-from-wordpress-to-octopress</id>
            <content type="html"><![CDATA[<p>Yesterday I decided to try a markdown powered blog platform, Octopress with Github Pages hosting</p>

<p>Reason for this change is probably the same as yours, person who reads this</p>

<ul>
<li>Wordpress sucks at formatting code</li>
<li>Most of my "notes" and "readme" from various projects are markdown files, so if I decided to publish one of them, copy paste wasn't enough</li>
<li>3rd, and probably most important. "Hey, we are programmers" we can't use Wordpress ;-)</li>
</ul>

<!-- more -->

<p>If you have more reasons, fell free to give a comment below.</p>

<p><strong>This is not a complete guide, I decided to write few keypoints that could help others with migrating their Wordpress to Octopress.</strong></p>

<h2>Installing Octopress</h2>

<p><a href="/blog/2013/10/20/how-to-setup-octopress-on-ubuntu/">How to setup Octopress on Ubuntu</a></p>

<h2>Migrating permalinks</h2>

<p>On old Wordpress blog I had this permalink structure</p>

<pre><code>/blog/:id/:title
</code></pre>

<p>while it was ok back then, because I could modify title without loosing back links, with Octopress ids aren't used anymore.</p>

<p>I decided to go with standard permalink structure</p>

<pre><code>/blog/:year/:month/:day/:title
</code></pre>

<p>Ok, but problem is</p>

<p>Now it's time to get old Wordpress links working in Octopress</p>

<h2><a name="redirect-301-on-github-pages"></a>Redirect 301 on Github Pages, move old posts to the new permalink structure</h2>

<p>We want to keep old links working. Best solution would be 301 redirect all old posts.</p>

<p>Unfortunately this cannot be done the "HTTP way" by sending proper response headers (without JS) on Github pages. But there is a solution for that.</p>

<p>First, include an entire Wordpress blog in read only mode.</p>

<p>Dump an entire Wordpress blog to your disk using wget</p>

<p><a href="/blog/2013/10/20/how-to-recursively-download-an-entire-website-using-wget/">How to Recursively Download an Entire Website Using WGET</a></p>

<p>In my case all downloaded posts were in /blog directory, so to get them still working on Octopress I had to copy</p>

<pre><code>/wp-content
/blog
</code></pre>

<p>to</p>

<pre><code>/source/wp-content
/source/blog
</code></pre>

<p>If you used other permalink structure for instance</p>

<pre><code>/:title
</code></pre>

<p>You need to copy every directory, sorry! :(</p>

<p>Now edit each <code>/:title/index.html</code> file and put these inside <code>&lt;head&gt;</code></p>

<pre><code class="html">    &lt;meta http-equiv="refresh" content="0; url=http://konradpodgorski.com/blog/2013/10/21/how-i-migrated-my-blog-from-wordpress-to-octopress/"&gt;
    &lt;link rel="canonical" href="http://konradpodgorski.com/blog/2013/10/21/how-i-migrated-my-blog-from-wordpress-to-octopress/" /&gt;
</code></pre>

<p>Unfortunately you need to do this manually in most cases.</p>

<p>Using <code>&lt;meta http-equiv="refresh"</code> will redirect each visitor to the new post.
 As for Google Bot, it threats <code>&lt;link rel="canonical" href=</code> as 301 redirect, well.. not exactly but effect is that you get your pages reindexed and that is what you want.</p>

<p>Now there is no longer need to put any notice about the fact that this is archived post etc.</p>

<h3>Migrating comments</h3>

<p>I decided to go with Disqus</p>

<ol>
<li>Register on Disqus</li>
<li>On still working Wordpress blog change permalink structure to the same as your new Octopress blog (very important!)</li>
<li>With changed structure install "Disqus" plugin, log in and export current Comments.</li>
<li>Because we changed permalink structure all comments will get mapped to the one that will be used in Octopress</li>
</ol>

<p>edit _config.yml and enter your shortname</p>

<pre><code># Disqus Comments
disqus_short_name: konradpodgorski
disqus_show_comment_count: true
</code></pre>

<h3>That's it</h3>

<p>for now</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[How to recursively download an entire website using WGET]]></title>
            <link href="http://konradpodgorski.com/blog/2013/10/20/how-to-recursively-download-an-entire-website-using-wget"/>
            <updated>2013-10-20T18:54:00+02:00</updated>
            <id>http://konradpodgorski.com/blog/2013/10/20/how-to-recursively-download-an-entire-website-using-wget</id>
            <content type="html"><![CDATA[<p>Wget snippet to recursively download an entire website using WGET</p>

<pre><code>wget http://example.com \
 --domains example.com \
 --recursive \
 --page-requisites \
 --no-clobber \
 --html-extension \
 --convert-links
</code></pre>

<!-- more -->

<p>Dump from wget --help for further reference</p>

<pre><code>Usage: wget [OPTION]... [URL]...

Mandatory arguments to long options are mandatory for short options too.

Startup:
  -V,  --version           display the version of Wget and exit.
  -h,  --help              print this help.
  -b,  --background        go to background after startup.
  -e,  --execute=COMMAND   execute a `.wgetrc'-style command.

Logging and input file:
  -o,  --output-file=FILE    log messages to FILE.
  -a,  --append-output=FILE  append messages to FILE.
  -d,  --debug               print lots of debugging information.
  -q,  --quiet               quiet (no output).
  -v,  --verbose             be verbose (this is the default).
  -nv, --no-verbose          turn off verboseness, without being quiet.
       --report-speed=TYPE   Output bandwidth as TYPE.  TYPE can be bits.
  -i,  --input-file=FILE     download URLs found in local or external FILE.
  -F,  --force-html          treat input file as HTML.
  -B,  --base=URL            resolves HTML input-file links (-i -F)
                             relative to URL.
       --config=FILE         Specify config file to use.

Download:
  -t,  --tries=NUMBER            set number of retries to NUMBER (0 unlimits).
       --retry-connrefused       retry even if connection is refused.
  -O,  --output-document=FILE    write documents to FILE.
  -nc, --no-clobber              skip downloads that would download to
                                 existing files (overwriting them).
  -c,  --continue                resume getting a partially-downloaded file.
       --progress=TYPE           select progress gauge type.
  -N,  --timestamping            don't re-retrieve files unless newer than
                                 local.
  --no-use-server-timestamps     don't set the local file's timestamp by
                                 the one on the server.
  -S,  --server-response         print server response.
       --spider                  don't download anything.
  -T,  --timeout=SECONDS         set all timeout values to SECONDS.
       --dns-timeout=SECS        set the DNS lookup timeout to SECS.
       --connect-timeout=SECS    set the connect timeout to SECS.
       --read-timeout=SECS       set the read timeout to SECS.
  -w,  --wait=SECONDS            wait SECONDS between retrievals.
       --waitretry=SECONDS       wait 1..SECONDS between retries of a retrieval.
       --random-wait             wait from 0.5*WAIT...1.5*WAIT secs between retrievals.
       --no-proxy                explicitly turn off proxy.
  -Q,  --quota=NUMBER            set retrieval quota to NUMBER.
       --bind-address=ADDRESS    bind to ADDRESS (hostname or IP) on local host.
       --limit-rate=RATE         limit download rate to RATE.
       --no-dns-cache            disable caching DNS lookups.
       --restrict-file-names=OS  restrict chars in file names to ones OS allows.
       --ignore-case             ignore case when matching files/directories.
  -4,  --inet4-only              connect only to IPv4 addresses.
  -6,  --inet6-only              connect only to IPv6 addresses.
       --prefer-family=FAMILY    connect first to addresses of specified family,
                                 one of IPv6, IPv4, or none.
       --user=USER               set both ftp and http user to USER.
       --password=PASS           set both ftp and http password to PASS.
       --ask-password            prompt for passwords.
       --no-iri                  turn off IRI support.
       --local-encoding=ENC      use ENC as the local encoding for IRIs.
       --remote-encoding=ENC     use ENC as the default remote encoding.
       --unlink                  remove file before clobber.

Directories:
  -nd, --no-directories           don't create directories.
  -x,  --force-directories        force creation of directories.
  -nH, --no-host-directories      don't create host directories.
       --protocol-directories     use protocol name in directories.
  -P,  --directory-prefix=PREFIX  save files to PREFIX/...
       --cut-dirs=NUMBER          ignore NUMBER remote directory components.

HTTP options:
       --http-user=USER        set http user to USER.
       --http-password=PASS    set http password to PASS.
       --no-cache              disallow server-cached data.
       --default-page=NAME     Change the default page name (normally
                               this is `index.html'.).
  -E,  --adjust-extension      save HTML/CSS documents with proper extensions.
       --ignore-length         ignore `Content-Length' header field.
       --header=STRING         insert STRING among the headers.
       --max-redirect          maximum redirections allowed per page.
       --proxy-user=USER       set USER as proxy username.
       --proxy-password=PASS   set PASS as proxy password.
       --referer=URL           include `Referer: URL' header in HTTP request.
       --save-headers          save the HTTP headers to file.
  -U,  --user-agent=AGENT      identify as AGENT instead of Wget/VERSION.
       --no-http-keep-alive    disable HTTP keep-alive (persistent connections).
       --no-cookies            don't use cookies.
       --load-cookies=FILE     load cookies from FILE before session.
       --save-cookies=FILE     save cookies to FILE after session.
       --keep-session-cookies  load and save session (non-permanent) cookies.
       --post-data=STRING      use the POST method; send STRING as the data.
       --post-file=FILE        use the POST method; send contents of FILE.
       --content-disposition   honor the Content-Disposition header when
                               choosing local file names (EXPERIMENTAL).
       --content-on-error      output the received content on server errors.
       --auth-no-challenge     send Basic HTTP authentication information
                               without first waiting for the server's
                               challenge.

HTTPS (SSL/TLS) options:
       --secure-protocol=PR     choose secure protocol, one of auto, SSLv2,
                                SSLv3, and TLSv1.
       --no-check-certificate   don't validate the server's certificate.
       --certificate=FILE       client certificate file.
       --certificate-type=TYPE  client certificate type, PEM or DER.
       --private-key=FILE       private key file.
       --private-key-type=TYPE  private key type, PEM or DER.
       --ca-certificate=FILE    file with the bundle of CA's.
       --ca-directory=DIR       directory where hash list of CA's is stored.
       --random-file=FILE       file with random data for seeding the SSL PRNG.
       --egd-file=FILE          file naming the EGD socket with random data.

FTP options:
       --ftp-user=USER         set ftp user to USER.
       --ftp-password=PASS     set ftp password to PASS.
       --no-remove-listing     don't remove `.listing' files.
       --no-glob               turn off FTP file name globbing.
       --no-passive-ftp        disable the "passive" transfer mode.
       --preserve-permissions  preserve remote file permissions.
       --retr-symlinks         when recursing, get linked-to files (not dir).

WARC options:
       --warc-file=FILENAME      save request/response data to a .warc.gz file.
       --warc-header=STRING      insert STRING into the warcinfo record.
       --warc-max-size=NUMBER    set maximum size of WARC files to NUMBER.
       --warc-cdx                write CDX index files.
       --warc-dedup=FILENAME     do not store records listed in this CDX file.
       --no-warc-compression     do not compress WARC files with GZIP.
       --no-warc-digests         do not calculate SHA1 digests.
       --no-warc-keep-log        do not store the log file in a WARC record.
       --warc-tempdir=DIRECTORY  location for temporary files created by the
                                 WARC writer.

Recursive download:
  -r,  --recursive          specify recursive download.
  -l,  --level=NUMBER       maximum recursion depth (inf or 0 for infinite).
       --delete-after       delete files locally after downloading them.
  -k,  --convert-links      make links in downloaded HTML or CSS point to
                            local files.
  -K,  --backup-converted   before converting file X, back up as X.orig.
  -m,  --mirror             shortcut for -N -r -l inf --no-remove-listing.
  -p,  --page-requisites    get all images, etc. needed to display HTML page.
       --strict-comments    turn on strict (SGML) handling of HTML comments.

Recursive accept/reject:
  -A,  --accept=LIST               comma-separated list of accepted extensions.
  -R,  --reject=LIST               comma-separated list of rejected extensions.
       --accept-regex=REGEX        regex matching accepted URLs.
       --reject-regex=REGEX        regex matching rejected URLs.
       --regex-type=TYPE           regex type (posix).
  -D,  --domains=LIST              comma-separated list of accepted domains.
       --exclude-domains=LIST      comma-separated list of rejected domains.
       --follow-ftp                follow FTP links from HTML documents.
       --follow-tags=LIST          comma-separated list of followed HTML tags.
       --ignore-tags=LIST          comma-separated list of ignored HTML tags.
  -H,  --span-hosts                go to foreign hosts when recursive.
  -L,  --relative                  follow relative links only.
  -I,  --include-directories=LIST  list of allowed directories.
  --trust-server-names             use the name specified by the redirection
                                   url last component.
  -X,  --exclude-directories=LIST  list of excluded directories.
  -np, --no-parent                 don't ascend to the parent directory.
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[How to Setup Octopress on Ubuntu]]></title>
            <link href="http://konradpodgorski.com/blog/2013/10/20/how-to-setup-octopress-on-ubuntu"/>
            <updated>2013-10-20T16:54:00+02:00</updated>
            <id>http://konradpodgorski.com/blog/2013/10/20/how-to-setup-octopress-on-ubuntu</id>
            <content type="html"><![CDATA[<p>Guide was copied from http://stackoverflow.com/a/14353864/1562884 for my reference</p>

<p>Helped me with this error during configuring Octopress on Ubuntu</p>

<pre><code>Error installing RedCloth:
ERROR: Failed to build gem native extension.
</code></pre>

<p>Guide below was written by <a href="http://stackoverflow.com/users/673057/eric-zhang">Eric Zhang</a></p>

<p>My Ubuntu 12.04 solution is install the ruby1.9.1-full version, that can resolve this issue.</p>

<pre><code>$sudo apt-get install ruby1.9.1-full
</code></pre>

<p>you can execute command:</p>

<pre><code>$sudo update-alternatives --config ruby
</code></pre>

<p>to select the alternative ruby which you have installed. and then, execute below commands to finish the octopress deploy:</p>

<pre><code>$git clone https://github.com/erizhang/octopress.git octopress
$cd octopress/
$sudo gem install bundler
$sudo gem install RedCloth -v '4.2.9'
$bundle install
$rake install
</code></pre>

<p>below commands you can find from octopress deploy guideline page:</p>

<pre><code>$rake setup_github_pages
$sudo rake setup_github_pages
$sudo rake generate
$sudo rake deploy
</code></pre>

<p>Hope it's helpful for you, thanks</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[How to implement a secure choice form field with Symfony]]></title>
            <link href="http://konradpodgorski.com/blog/2013/10/19/how-to-implement-a-secure-choice-form-field-with-symfony"/>
            <updated>2013-10-19T19:17:00+02:00</updated>
            <id>http://konradpodgorski.com/blog/2013/10/19/how-to-implement-a-secure-choice-form-field-with-symfony</id>
            <content type="html"><![CDATA[<p>Create Util class for your entity, in my case entity is called 'Brand'</p>

<p><strong>src/KP/Brand/MainBundle/Util/BrandUtil.php</strong></p>

<pre><code class="php">    &lt;?php

    namespace KP\Brand\MainBundle\Util;

    use KP\Brand\MainBundle\Entity\Brand;

    class BrandUtil
    {

        /**
         * @param bool $withLabels
         *
         * @return array
         */
        public static function getAvailableLanguageCodes($withLabels = false)
        {
            $choices = array(
                'pl' =&gt; 'Polish',
                'en' =&gt; 'English'
            );

            if ($withLabels) {
                return $choices;
            } else {
                return array_keys($choices);
            }
        }
    }
</code></pre>

<p>Create standard form type for your entity (I skipped required getName and setDefaultOptions methods here)</p>

<p><strong>src/KP/Brand/MainBundle/Form/BrandType.php</strong></p>

<pre><code class="php">    &lt;?php

    namespace KP\Brand\MainBundle\Form;

    use KP\Brand\MainBundle\Util\BrandUtil;
    use Symfony\Component\Form\AbstractType;
    use Symfony\Component\Form\FormBuilderInterface;
    use Symfony\Component\OptionsResolver\OptionsResolverInterface;

    class BrandType extends AbstractType
    {
        /**
         * @param FormBuilderInterface $builder
         * @param array $options
         */
        public function buildForm(FormBuilderInterface $builder, array $options)
        {
            $builder
                -&gt;add('name')
                -&gt;add(
                    'languageCode',
                    'choice',
                    array(
                        'label' =&gt; 'Language',
                        'choices' =&gt; BrandUtil::getAvailableLanguageCodes(true),
                    )
                );
        }

    }
</code></pre>

<p><strong>src/KP/Brand/MainBundle/Resource/config/validation.yml</strong></p>

<pre><code class="php">    KP\Brand\MainBundle\Entity\Brand:
    properties:
        languageCode:
            - Choice: { callback: [KP\Brand\MainBundle\Util\BrandUtil, getAvailableLanguageCodes] }
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[How to handle Angular JS api errors using response interceptors]]></title>
            <link href="http://konradpodgorski.com/blog/2013/10/08/handle-angular-js-api-errors-using-response-interceptors"/>
            <updated>2013-10-08T00:00:00+02:00</updated>
            <id>http://konradpodgorski.com/blog/2013/10/08/handle-angular-js-api-errors-using-response-interceptors</id>
            <content type="html"><![CDATA[<p>http://blog.brunoscopelliti.com/http-response-interceptors</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Python 2.7 on Centos]]></title>
            <link href="http://konradpodgorski.com/blog/2013/09/25/python-2-7-on-centos"/>
            <updated>2013-09-25T00:00:00+02:00</updated>
            <id>http://konradpodgorski.com/blog/2013/09/25/python-2-7-on-centos</id>
            <content type="html"><![CDATA[<p>http://toomuchdata.com/2012/06/25/how-to-install-python-2-7-3-on-centos-6-2/</p>

<p>Thanks Daniel for this guide</p>
]]></content>
        </entry>
    </feed>